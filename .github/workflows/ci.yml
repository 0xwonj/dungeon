name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - "*"
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Skip RISC0 guest builds for faster CI
  RISC0_SKIP_BUILD: 1

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # Format Check (Fast, no dependencies)
  # ============================================================================
  format:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all --check

  # ============================================================================
  # Lint (Multiple backends in parallel)
  # ============================================================================
  lint-risc0:
    name: Lint (RISC0)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-lint-risc0-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-lint-risc0-
            ${{ runner.os }}-cargo-build-

      - name: Run clippy (RISC0 backend)
        run: cargo clippy --workspace --all-targets -- -D warnings

  lint-stub:
    name: Lint (Stub)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-lint-stub-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-lint-stub-
            ${{ runner.os }}-cargo-build-

      - name: Run clippy (Stub backend)
        run: cargo clippy --workspace --all-targets --no-default-features --features stub -- -D warnings

  # ============================================================================
  # Test (Multiple backends in parallel)
  # ============================================================================
  test-risc0:
    name: Test (RISC0)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-test-risc0-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-test-risc0-
            ${{ runner.os }}-cargo-build-

      - name: Run tests (RISC0 backend)
        run: cargo test --workspace --locked

  test-stub:
    name: Test (Stub)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-test-stub-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-test-stub-
            ${{ runner.os }}-cargo-build-

      - name: Run tests (Stub backend)
        run: cargo test --workspace --locked --no-default-features --features stub

  # ============================================================================
  # Build Verification (Ensure all backends compile)
  # ============================================================================
  build-verify:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        backend:
          - name: risc0
            flags: ""
          - name: stub
            flags: "--no-default-features --features stub"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-verify-${{ matrix.backend.name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-verify-${{ matrix.backend.name }}-
            ${{ runner.os }}-cargo-build-

      - name: Build workspace (${{ matrix.backend.name }})
        run: cargo build --workspace --locked ${{ matrix.backend.flags }}

  # ============================================================================
  # Summary Job (Required for branch protection)
  # ============================================================================
  ci-success:
    name: CI Success
    if: always()
    needs:
      - format
      - lint-risc0
      - lint-stub
      - test-risc0
      - test-stub
      - build-verify
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "⚠️ One or more CI jobs were cancelled"
            exit 1
          else
            echo "✅ All CI jobs passed"
            exit 0
          fi
